---
title: "Event sequences in Fragile X-associated tremor/ataxia syndrome"
knitr:
  opts_chunk: 
    collapse: true
    comment: "#>" 
project: 
  execute-dir: project
filters:
  - ../../docx-landscape.lua
---

```{=html}
<style>
.quarto-figure-center > figure {
text-align: center;
}
</style>
```

# Introduction

The fragile X-associated tremor/ataxia syndrome (FXTAS) is a relatively newly discovered neurodegenerative disorder caused by the premutation (55 to 200 CGG repeats) in the FMR1 gene [@hagerman2001intention]. 
The premutation is associated with elevation of the FMR1 mRNA, and this leads to RNA toxicity including oxidative stress, mitochondrial dysfunction, calcium dysregulation and sequestration of proteins important to neuronal function.
Proteins and neurofilaments sequester with the excess FMR1 mRNA, leading to the formation of eosinophilic, tau negative intranuclear inclusions in neurons and astrocytes throughout the CNS and even in the peripheral nervous system [@greco2006neuropathology; @hunter2012capturing]. 
FXTAS usually begins in the 60s, and as premutation carriers age, the prevalence of FXTAS increases from approximately 40% in males in their 60s to 75% in their 80s [@jacquemont2004penetrance].
Females with the premutation are also at risk for FXTAS, but the prevalence is lower; approximately 16 to 20% may develop FXTAS, but it is less severe than in the males [@tassone2023insight]. 
The higher the CGG repeat within the premutation range the earlier the onset of FXTAS and the earlier the age of death [@greco2006neuropathology].
The prevalence of the premutation is approximately 1 in 148 to 200 females in the general population and one in 290 to 855 males (@maenner2013fmr1; @hunter2014epidemiology).

A currently open question is: In what sequential order do FXTAS symptoms typically appear, how does that sequence vary between participants, and what baseline characteristics predict that order?
Here, we apply the Ordinal **Su**btype and **St**age **In**ference ("SuStaIn") algorithm [@young2021ordinal] to find event sequences for FXTAS patients.

```{r, include = FALSE}
#| label: setup
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  # fig.width = 7, 
  # fig.height = 10,
  include = TRUE
)
```

```{r libraries}
#| message: false
# devtools::load_all()
library(fxtas)
reticulate::use_condaenv("fxtas39",required = TRUE)
library(tidyverse)
library(reticulate)
library(pander)
library(table1)
library(magrittr)
```

```{r}
#| label: "set run parameters"
#| 
fit_models = TRUE
# fit_models = FALSE
run_CV =  TRUE
# run_CV = FALSE

rerun = TRUE
rerun = FALSE
# 
plot_python = TRUE
# plot_python = FALSE

pvd_height = 8
pvd_width = 10
pvd_line_height = 10
pvd_line_width = 8
size.y = 11
N_startpoints = 10L
# use_parallel_startpoints = TRUE
use_parallel_startpoints = FALSE # couldn't get parallel to work, 2024/06/15
N_S_max = 8L
N_S_max_stratified = 2L
N_CV_folds = 10L

compact_fig_caption <- paste0(
  "The different colors correspond to the different levels above baseline. ",
  "Red corresponds to the first level, blue to the second level, ",
  "purple to the third level, green to the fourth level, ",
  "and magenta to the fifth level above baseline. ",
  "See @tbl-biomarker-list for the levels of each biomarker."
)

# column_var = "Recruited in study phase"
# column_var = "FX3*"
column_var = c("Gender", "FX3*")

N_iterations_MCMC = 1e5L
dataset_name = 'sample_data'
root_dir = here::here()
setwd(root_dir)
output_folder = 
  "output/output.fixed_CV/" |> 
  fs::dir_create()
```

# Methods

## Data

```{r}
#| label: subset-data

full_data = trax_gp34_v1
n_missing_CGG = full_data$CGG |> is.na() |> sum()
n_above_200 = sum(full_data$CGG >= 200, na.rm = TRUE)
v1_usable = full_data |> filter(CGG < 200)
v1_usable_cases = v1_usable |> filter(CGG >= 55)
# note: there are 231 records in `visit1` with CGG >= 55, but 4 have CGG >= 200
# previously `nrow(v1_usable_cases)` was 221, which was based on incorrectly filtering on a version of CGG that hadn't been backfilled.

gp34_v1_controls =  v1_usable |> filter(CGG < 55)
year_range = v1_usable$`Visit Date` |> year() |> range()
min_year = min(year_range)
max_year = max(year_range)
```

### Study cohorts

Research participants were recruited between `r min_year` and `r max_year`
for two longitudinal cohorts (GP and Trax).
The inclusion criteria were: age 40 years or greater; 
[CLINICAL TEAM: please complete this section].

Written informed consent was obtained from all participants 
according to the procedures approved by the 
University of California Davis Institutional Review Board.  

The primary event sequence analysis included baseline-visit data 
from 297 participants from the two cohorts,
consisting of `r nrow(v1_usable_cases)` Fragile X premutation carriers 
and `r nrow(gp34_v1_controls)`  controls. 

[Supplemental Figure @fig-hist-CGG-gp34-v1] shows the distribution of CGG repeats 
among the participants included in the analysis. 
@tbl-demographics provides demographic information about the study participants. 

```{r}
#| label: "biomarker-events"
biomarker_groups = compile_biomarker_groups_table()

biomarker_varnames = 
  biomarker_groups |> 
  pull("biomarker")

biomarker_levels = 
  v1_usable |> 
  dplyr::select(all_of(biomarker_varnames)) |> 
  lapply(F = levels)

df = v1_usable

biomarker_events_table =
  construct_biomarker_events_table(
    biomarker_levels,
    biomarker_groups)

nlevs = 
  biomarker_levels |> sapply(length)

```

### Biomarkers of neurodegenerative events

We analyzed first measurements of `r length(biomarker_levels)`
ordinal biomarkers (@tbl-biomarker-list)
with a total of `r nrow(biomarker_events_table)` non-baseline levels.
Each ordinal level above baseline constitutes an outcome event 
in the disease progression modelling analysis (@sec-Statistical-analysis).
[Supplemental Tables @tbl-tremors] - [-@tbl-autoimmune] 
summarize the biomarker data, 
stratified by CGG (`r unique(v1_usable$"FX3*")`) 
and Sex (`r unique(v1_usable$Gender)`).

## Statistical analysis {#sec-Statistical-analysis}

We applied an event-based model to our data using the 
Ordinal **Su**btype and **St**age **In**ference ("SuStaIn") algorithm 
[@young2018uncovering; @young2021ordinal] 
 to estimate event orderings and subtypes for FXTAS patients. 
Ordinal SuStaIn is a data-driven algorithm that combines 
disease progression modelling [@fonteijn2012event] 
and unsupervised clustering [@lazarsfeld1950logical; @mclachlan2019finite] 
to model event onset sequences 
using cross-sectional samples of patient and control populations. 
The algorithm simultaneously clusters individuals into latent subtypes 
and characterizes the event ordering that best defines each subtype, 
thus capturing heterogeneity in both disease subtype and disease stage.
Ordinal SuStaIn uses Markov Chain Monte Carlo (MCMC) sampling to estimate 
the Bayesian posterior probability of each possible event sequence 
for each subtype given the training dataset, 
assuming a uniform prior distribution over the set of all possible patterns. 

We conducted subgroup analyses by fitting models stratified by: 
(1) sex (@fig-first-only);
(2) CGG repeats (<100 vs $\ge$ 100) (@fig-pvd-by-cgg);
(3) both sex and CGG repeats (<100 vs $\ge$ 100) (@sec-stratified-by-cgg-and-sex).
For these subgroup analyses, we did not search for latent clusters.

### Incomplete data {#sec-incomplete-data}

```{r}
#| label: count-incomplete-data
x1 = v1_usable_cases |> pull(`Ataxia: severity`)
n_missing = sum(x1 |> is.na())
# n_obs = sum(x1 |> is.na() |> not()) # not() is deprecated?
n_obs = sum(!is.na(x1)) 
n_total = length(x1)
pct_missing = scales::percent(n_missing / n_total, accuracy = 0.1)
pct_obs = scales::percent(n_obs / n_total, accuracy = 0.1)
probs = 
  x1 |> 
  table() |> 
  proportions() |> 
  as.vector() |> 
  scales::percent(accuracy = 0.1) |> 
  and::and()
```

We assumed that missing biomarker data 
were missing completely at random (MCAR) 
(@rubin1976inference, @little2019statistical).
We substituted missing outcome event data 
by assigning a probability distribution across the 
possible values of the missing variable 
that matched the marginal distribution among the cases. 
For example, `r n_missing` of the `r `length(x1)` cases (`r pct_missing`) 
had missing values for Ataxia Severity, 
and `r n_obs` (`r pct_obs`) had recorded values, 
distributed among severity levels 0-4 ([Supplementary Table @tbl-ex-incomplete-data]). 
For the `r n_missing` cases with missing values, 
we assigned probabilities of `r probs` to Ataxia Severity levels `r and::and(0:4)`, respectively.

### Statistical hypothesis tests

In order to test for statistical significant evidence of differences in event sequences
between males and females
and 
between lower premutation levels (CGG <100) and higher premutation levels (CGG 100-199),
we implemented a permutation test.
We first created 1000 permuted datasets in which we randomly shuffled the variable being tested.
We computed the mean log-likelihood of the data for each permuted dataset 
(averaging across MCMC samples and summing across the strata being compared) 
and compared the distribution of permuted mean log-likelihoods 
to the observed log-likelihood calculated from the original (unpermuted) dataset.
We computed the p-value 
by first computing the percentile of the observed mean log-likelihood 
relative to the empirical distribution of the permuted mean log-likelihoods,
subtracting that percentile from 1 if larger than 0.5,
and then multiplying by two to create a two-sided test.
A detailed numerical example of this procedure is provided in the Supplementary Materials (@sec-permutation-test).

### Latent subtypes {#sec-methods-latent-subtypes}

We also fit the model on the full dataset (not stratified by sex or CGG) 
for 2-`r N_S_max` latent subtypes, 
each with their own ordering. 
We determined the optimal number of latent subtypes for this dataset using 
the CVIC criterion (Supplementary Materials @sec-cvic) and 
the OOFLL criterion (Supplementary Materials @sec-oofll).
We performed `r N_CV_folds`-fold cross-validation on the unstratified data, 
and calculated the CVIC and OOFLL for 1-`r N_S_max` latent subtypes. 
More details are provided in the Supplementary Materials (@sec-subtypes).

### Longitudinal subsets

We also fit the Ordinal SuStaIn model, stratified by sex, including all longitudinal repeated measurements of the same participants over time ([ Supplementary Section @sec-longitudinal-results]). 
Including later observations might help the model clarify the later stages of the event sequence. 
However, correlation between repeated observations of the same individuals are not accounted for by the Ordinal SuStaIn model, 
which assumes that all observations are statistically independent, 
so including repeated measurements will lead to exaggerated estimates of precision.

### Visualizing modeling results

We visualized the results of Ordinal SuStaIn analysis using "positional variance diagrams" (PVDs), which are heatmaps with biomarker events on the y-axis and sequence positions on the x-axis. 
The PVD's color scale indicates the Bayesian posterior probability that a particular biomarker event (y-axis) appears at a particular position along the progression sequence (x-axis). 
Brighter colors indicate a more probable sequence position, and paler colors indicate a less probable position. 
The colors indicate the ordinal levels of progression.

```{r}
#| label: get-control-dists

control_data = 
  df |> 
  filter(`FX*` == "CGG < 55") |> 
  select(all_of(biomarker_varnames))

patient_data = 
  df |> 
  # na.omit() |>
  filter(`FX*` == "CGG >= 55")

prob_correct = 
  control_data |> 
  compute_prob_correct(
    max_prob = .95,
    biomarker_levels = biomarker_levels)

```

```{r "run OSA from R"}
#| message: false
#| label: model-all-data
#| include: false
#| eval: !expr fit_models

sustain_output = run_and_save_OSA(
  biomarker_levels = biomarker_levels, 
  prob_correct = prob_correct, 
  SuStaInLabels = biomarker_varnames,
  N_startpoints = N_startpoints,
  N_S_max = N_S_max, 
  N_iterations_MCMC = N_iterations_MCMC, 
  output_folder = output_folder, 
  dataset_name = dataset_name, 
  use_parallel_startpoints = use_parallel_startpoints,
  seed = 1,
  plot = plot_python,
  rerun = rerun,
  patient_data = patient_data,
  N_CV_folds = N_CV_folds)

```

```{r}
#| message: false
#| label: model-males
#| include: false
#| eval: !expr fit_models

sustain_output_males = run_and_save_OSA(
  patient_data = patient_data |> filter(Gender == "Male"),
  prob_correct = prob_correct,
  biomarker_levels = biomarker_levels,
  SuStaInLabels = biomarker_varnames,
  N_startpoints = N_startpoints,
  N_S_max = N_S_max_stratified,
  N_iterations_MCMC = N_iterations_MCMC,
  output_folder = output_folder,
  dataset_name = "males",
  use_parallel_startpoints = use_parallel_startpoints,
  seed = 1,
  plot = plot_python,
  rerun = rerun,
  fig_size = c(20, 10)
)

```


```{r}
#| message: false
#| label: model-females
#| include: false
#| eval: !expr fit_models

sustain_output_females = run_and_save_OSA(
  biomarker_levels = biomarker_levels, prob_correct = prob_correct, 
  patient_data = patient_data |> filter(Gender == "Female"),
  
  SuStaInLabels = biomarker_varnames,
  N_startpoints = N_startpoints,
  N_S_max = N_S_max_stratified, 
  N_iterations_MCMC = N_iterations_MCMC, 
  output_folder = output_folder, 
  dataset_name = "females", 
  use_parallel_startpoints = use_parallel_startpoints,
  seed = 1,
  plot = plot_python,
  rerun = rerun,
  fig_size = c(20,10))

```


```{r}
#| message: false
#| label: "cgg_over_100"
#| include: false
#| eval: !expr fit_models

sustain_output_cgg100plus = run_and_save_OSA(
  biomarker_levels = biomarker_levels, prob_correct = prob_correct, 
  patient_data = patient_data |> filter(`CGG` >= 100),
  
  SuStaInLabels = biomarker_varnames,
  N_startpoints = N_startpoints,
  N_S_max = N_S_max_stratified, 
  N_iterations_MCMC = N_iterations_MCMC, 
  output_folder = output_folder, 
  dataset_name = "over100", 
  use_parallel_startpoints = use_parallel_startpoints,
  seed = 1,
  plot = plot_python)

```

```{r}
#| message: false
#| label: "cgg_under_100"
#| include: false
#| eval: !expr fit_models

sustain_output_cgg100minus = run_and_save_OSA(
  biomarker_levels = biomarker_levels, 
  prob_correct = prob_correct, 
  patient_data = patient_data |> filter(`CGG` < 100),
  SuStaInLabels = biomarker_varnames,
  N_startpoints = N_startpoints,
  N_S_max = N_S_max_stratified, 
  N_iterations_MCMC = N_iterations_MCMC, 
  output_folder = output_folder, 
  dataset_name = "under100", 
  use_parallel_startpoints = use_parallel_startpoints,
  seed = 1,
  plot = plot_python)

```

```{r}
#| message: false
#| label: "cgg_under_100 & Male"
#| include: false
sustain_output_cgg100minus_males = run_and_save_OSA(
  biomarker_levels = biomarker_levels,
  prob_correct = prob_correct,
  patient_data = patient_data |>
    filter(
      `CGG` < 100,
      Gender == "Male"),

  SuStaInLabels = biomarker_varnames,
  N_startpoints = N_startpoints,
  N_S_max = N_S_max_stratified,
  N_iterations_MCMC = N_iterations_MCMC,
  output_folder = output_folder,
  dataset_name = "under100_Male",
  rerun = rerun,
  use_parallel_startpoints = use_parallel_startpoints,
  plot = plot_python)
```

```{r}
#| message: false
#| label: "cgg_over_100 & Male"
#| include: false
sustain_output_cgg100plus_males = run_and_save_OSA(
  biomarker_levels = biomarker_levels,
  prob_correct = prob_correct,
  patient_data = patient_data |>
    filter(
      `CGG` >= 100,
      Gender == "Male"),
  SuStaInLabels = biomarker_varnames,
  N_startpoints = N_startpoints,
  N_S_max = N_S_max_stratified,
  N_iterations_MCMC = N_iterations_MCMC,
  output_folder = output_folder,
  dataset_name = "over100_Male",
  rerun = rerun,
  use_parallel_startpoints = use_parallel_startpoints,
  plot = plot_python)
```


```{r}
#| message: false
#| label: "cgg_under_100 & Female"
#| include: false
sustain_output_cgg100minus_females = run_and_save_OSA(
  biomarker_levels = biomarker_levels,
  prob_correct = prob_correct,
  patient_data = patient_data |>
    filter(`CGG` < 100,
           Gender == "Female"),
  SuStaInLabels = biomarker_varnames,
  N_startpoints = N_startpoints,
  N_S_max = N_S_max_stratified,
  N_iterations_MCMC = N_iterations_MCMC,
  output_folder = output_folder,
  rerun = rerun,
  dataset_name = "under100_Female",
  use_parallel_startpoints = use_parallel_startpoints,
  plot = plot_python)
```

```{r}
#| message: false
#| label: "cgg_over_100 & Female"
#| include: false
sustain_output_cgg100plus_females = run_and_save_OSA(
  biomarker_levels = biomarker_levels,
  prob_correct = prob_correct,
  patient_data = patient_data |>
    filter(
      `CGG` >= 100,
      Gender == "Female"),

  SuStaInLabels = biomarker_varnames,
  N_startpoints = N_startpoints,
  N_S_max = N_S_max_stratified,
  N_iterations_MCMC = N_iterations_MCMC,
  output_folder = output_folder,
  rerun = rerun,
  dataset_name = "over100_Female",
  use_parallel_startpoints = use_parallel_startpoints,
  plot = plot_python)
```

```{r}
#| label: save-image
fs::path_package("fxtas", "extdata") |> 
  fs::path("ordinal-sustain-results.rda") |> 
  save.image()

# fs::path_package("fxtas", "extdata") |>
#   fs::path("ordinal-sustain-results.rda") |>
#   load()

```

```{r}
#| label: extract-figs

results_v1 = extract_results_from_pickles(
  n_s = 1:N_S_max,
  rda_filename = "data.RData",
  dataset_name = "sample_data",
  output_folder = "output/output.fixed_CV")

fig_females_first = extract_figs_from_pickle(
  size.y = size.y,
  n_s = 1,
  rda_filename = "data.RData",
  dataset_name = "females",
  output_folder = "output/output.fixed_CV")

fig_males_first = extract_figs_from_pickle(
  size.y = size.y,
  n_s = 1,
  rda_filename = "data.RData",
  dataset_name = "males",
  output_folder = "output/output.fixed_CV")

fig_both_first = extract_figs_from_pickle(
  size.y = size.y,
  n_s = 1,
  rda_filename = "data.RData",
  dataset_name = "sample_data",
  output_folder = "output/output.fixed_CV")

fig_under100 = extract_figs_from_pickle(
  size.y = size.y,
  n_s = 1,
  dataset_name = "under100",
  output_folder = output_folder)

fig_over100 = extract_figs_from_pickle(
  size.y = size.y,
  n_s = 1,
  dataset_name = "over100",
  output_folder = output_folder)

fig_under100_males = extract_figs_from_pickle(
  size.y = size.y,
  n_s = 1,
  dataset_name = "under100_Male",
  output_folder = output_folder)

fig_over100_males = extract_figs_from_pickle(
  size.y = size.y,
  n_s = 1,
  dataset_name = "over100_Male",
  output_folder = output_folder)


fig_under100_females = extract_figs_from_pickle(
  size.y = size.y,
  n_s = 1,
  dataset_name = "under100_Female",
  output_folder = output_folder)

fig_over100_females = extract_figs_from_pickle(
  size.y = size.y,
  n_s = 1,
  dataset_name = "over100_Female",
  output_folder = output_folder)

```

## Software

The Ordinal Sustain analysis was performed in Python 3.9 (@python3) 
using the `pySuStaIn` package (@aksman2021pysustain).
Data pre-processing and results post-processing were performed in R 4.4.0 (@rcore) 
using the `tidyverse` packages (@tidyverse).
The `reticulate` package (@reticulate) was used to create a programming interface between 
Python and R.
The code implementing these analyses is available online at <https://github.com/d-morrison/fxtas>.

# Results

```{r}
#| label: basic-summary-stats
males = v1_usable |> filter(Gender == "Male")
females = v1_usable |> filter(Gender == "Female")
stages = v1_usable_cases |> select(`FXTAS Stage (0-5)*`) |> table()
```

@tbl-demographics describes summary statistics patient characteristics included in the analysis. 
Our data included: 
`r nrow(v1_usable_cases)` Fragile X premutation carriers and 
`r nrow(gp34_v1_controls)` controls;
`r nrow(males)` males and `r nrow(females)` females;
and `r and::and(stages)` carriers at FXTAS stages `r names(stages) |> and::and()`, respectively.

(**Kyoungmi: in your previous comments, you mentioned we should say something about biomarker distributions here, but I'm not sure what exactly to add?**)

## Stratified by sex

```{r}
#| label: p-val-test-sex
output_folder = "output/output.fixed_CV/"

permuted_test_stats = collect_permutation_test_stats(
  output_folder = output_folder,
  permuting_variables = "Gender")

observed_test_stat = get_observed_permutation_test_stat(
  output_folder,
  dataset_names = c('females', 'males'))

pval_sex_gp34_v1 = permutation_test(
  observed_test_stat = observed_test_stat,
  permuted_test_stats = permuted_test_stats
)

```

@fig-first-only shows the estimated event sequences stratified by sex, and @fig-first-only-change compares the estimated sequences.
We found statistically significant evidence of a difference in event sequences 
between males and females (p = `r pval_sex_gp34_v1`). 
It appears that 
premutation females typically develop threshhold-level Mood Disorder and Anxiety symptoms prior to FXTAS Stage 1,
whereas males typically develop these symptoms between FXTAS Stages 3 and 4.
Cognitive declines, as measured by SWM and PAL, also occur at earlier FXTAS stages for females.
Ataxia occurs prior to Stage 1 for females and after Stage 2 for males.
However, Ataxia severity 1 occurs earlier for males (between Stages 2-3) than for females (between Stages 3-4).

MRI biomarkers of decline and Parkinsonian features also appear at earlier stages for males than for females

## Stratified by CGG repeats

```{r}
#| label: p-val-test-cgg
output_folder = "output/output.fixed_CV/"

permuted_test_stats = collect_permutation_test_stats(
  output_folder = output_folder,
  permuting_variables = "FX3")

observed_test_stat = get_observed_permutation_test_stat(
  output_folder,
  dataset_names = c('under100', 'over100'))

pval_cgg_gp34_v1 = permutation_test(
  observed_test_stat = observed_test_stat,
  permuted_test_stats = permuted_test_stats
)
# autoplot(pval_sex_gp34_v1)
```

We did not find statistically significant evidence of a difference in event sequences 
between CGG < 100 and CGG > 100,  (p = `r pval_cgg_gp34_v1`).
@fig-pvd-by-cgg shows the estimated sequence models stratified by CGG repeat level.

## Stratified by CGG and Sex {#sec-stratified-by-cgg-and-sex}

### Comparing sexes stratified by CGG level

```{r}
#| label: p-val-test-sex-under100
output_folder = "output/output.fixed_CV/"

permuted_test_stats = collect_permutation_test_stats(
  output_folder = output_folder,
  stratifying_levels = "CGG 55-99",
  permuting_variables = "Gender")

observed_test_stat = get_observed_permutation_test_stat(
  output_folder,
  dataset_names = c('under100_Female', 'under100_Male'))

pval_under100_sex_gp34_v1 = permutation_test(
  observed_test_stat = observed_test_stat,
  permuted_test_stats = permuted_test_stats
)

# autoplot(pval_under100_sex_gp34_v1)

```

We found statistically significant evidence of a difference between males and females 
among those with CGG < 100 (p = `r pval_under100_sex_gp34_v1`). 
@fig-pvd-by-gender-cgg_under100 shows the stratified models with uncertainty quantified, and @fig-pvd-by-gender-cgg_under100-change compares the maximum likelihood estimates of the stratified sequences.
Several psychiatric disorders (as measured by SCID) occur prior to FXTAS Stage 0 among females with CGG < 100, but at later FXTAS stages for males with CGG < 100.
MRI biomarkers appear to occur at later stages for females.




```{r}
#| label: p-val-test-sex-over100
output_folder = "output/output.fixed_CV/"

permuted_test_stats = collect_permutation_test_stats(
  output_folder = output_folder,
  stratifying_levels = "CGG 100-199",
  permuting_variables = "Gender")

observed_test_stat = get_observed_permutation_test_stat(
  output_folder,
  dataset_names = c('over100_Female', 'over100_Male'))

pval_over100_sex_gp34_v1 = permutation_test(
  observed_test_stat = observed_test_stat,
  permuted_test_stats = permuted_test_stats
)

# autoplot(pval_over100_sex_gp34_v1)

```

We did not find statistically significant evidence of a difference between males and females 
among those with CGG > 100 (p `r pval_over100_sex_gp34_v1`). 
@fig-pvd-by-gender-cgg_over100 shows the estimated stratified models, 
and @fig-pvd-by-gender-cgg_over100-change compares the maximum likelihood estimates of the sequences. 
The small sample sizes for these these subgroups made detecting differences difficult.

### Comparing CGG levels stratified by sex

```{r}
#| label: p-val-test-cgg-male
output_folder = "output/output.fixed_CV/"

permuted_test_stats = collect_permutation_test_stats(
  output_folder = output_folder,
  stratifying_levels = "Male",
  permuting_variables = "FX3")

observed_test_stat = get_observed_permutation_test_stat(
  output_folder,
  dataset_names = c('under100_Male', 'over100_Male'))

pval_male_cgg_gp34_v1 = permutation_test(
  observed_test_stat = observed_test_stat,
  permuted_test_stats = permuted_test_stats
)

# autoplot(pval_male_cgg_gp34_v1)

```

We found significant evidence of a difference between CGG < 100 and CGG ≥ 100 among males (p = `r pval_male_cgg_gp34_v1`). @fig-pvd-by-cgg-male shows the corresponding stratified models and 
@fig-pvd-by-cgg-male-change compares the maximum likelihood estimates of the sequences for these two subgroups.
Males with CGG ≥ 100 experienced MRI biomarkers at earlier FXTAS stages than males with CGG < 100, whereas postural tremor, resting tremor, and intermittent tremor all tended to occur at earlier FXTAS stages for males with CGG < 100.

```{r}
#| label: p-val-test-cgg-female
output_folder = "output/output.fixed_CV/"

permuted_test_stats = collect_permutation_test_stats(
  output_folder = output_folder,
  stratifying_levels = "Female",
  permuting_variables = "FX3")

observed_test_stat = get_observed_permutation_test_stat(
  output_folder,
  dataset_names = c('under100_Female', 'over100_Female'))

pval_female_cgg_gp34_v1 = permutation_test(
  observed_test_stat = observed_test_stat,
  permuted_test_stats = permuted_test_stats
)

```

We did not find statistically significant evidence of a difference between CGG < 100 and CGG ≥ 100 among females (p = `r pval_female_cgg_gp34_v1`). @fig-pvd-by-cgg-female shows the estimated stratified models, and @fig-pvd-by-cgg-female-change compares the maximum likelihood estimates. Here again, sample size was an issue, especially for females with CGG ≥ 100.

## Latent Subtypes

```{r}
#| label: set-optimal-subtypes
temp = sustain_output |> attr("CV")
n_s_min_CVIC = which.min(temp$CVIC)
n_s_selected = 4

results_cv_max = extract_results_from_pickle(
  n_s = n_s_selected,
  dataset_name = dataset_name,
  output_folder = output_folder)
```

Based on the CVIC criterion ([Supplementary section @sec-cvic]), it appears that `r n_s_min_CVIC` subtypes is the optimal number for the full, unstratified dataset (@fig-cvic). The out-of-fold log-likelihood (Supplementary Material @eq-def-oof-llik) showed substantial fold-to-fold variation.
Between `r broman::spell_out(n_s_selected)` and `r broman::spell_out(N_S_max)` latent subgroups, 
the distribution of OOFLL appears to be
approximately unchanging and the CVIC appears approximately flat.
From these results, it does not appear that there is much benefit to including
more than `r broman::spell_out(n_s_selected)` latent subgroups for this dataset.
Therefore, for easier clinical interpretation, we chose to analyze the results with only `r n_s_selected` subtypes.

@fig-pvd_chosen_subtypes shows positional variance diagrams (PVDs) for each of the subtype clusters detected under this assumption, and @tbl-sg_demos shows the demographics of the patients clustered in each subtype. Patients in the "Type 0" category were too early in the disease process to be classified into a subtype.

Females were more likely to be in latent subtype 2 (39% versus 24%), whereas males were more likely to be in in subtype 3 (29% versus 12%). Subtypes 1 and 4 were equally prevalent among men and women.

# Discussion

## Missing data

We had substantial amounts of missing data. 
As described in the methods (@sec-incomplete-data),
we used the marginal distribution of each biomarker among cases
to impute the underlying values of these missing data. 
The missing data contributes to the large amount of uncertainty in the results.

[more discussion to be added]

# References {.unnumbered}

::: {#refs}
:::

::: landscape

# Tables {.unnumbered}

```{r}
#| label: "tbl-demographics"
#| tbl-cap: "Demographics by CGG repeats level"

v1_usable |> make_demographics_table()

```

{{< pagebreak >}}

```{r}
#| tbl-cap: "Biomarkers used in analysis"
#| label: "tbl-biomarker-list"

v1_usable |> make_biomarkers_table()
```

{{< pagebreak >}}

```{r}
#| tbl-cap: !expr glue::glue("Subtype demographics ({n_s_selected} subtypes)")
#| label: tbl-sg_demos
#| results: asis


set.seed(2)
table_subtype_by_demographics(
  patient_data,
  subtype_and_stage_table = 
    results_cv_max$subtype_and_stage_table
) |>
  gtsummary::as_flex_table() |>
  flextable::width(width = 1.75) |>
  flextable::width(j = 2:6, width = 0.75) |>
  flextable::width(j = 7, width = 1)

```

:::

# Figures {.unnumbered}

```{r}
#| label: "fig-first-only"
#| column: page
#| fig-height: !expr pvd_height
#| fig-width: !expr pvd_width
#| fig-cap: !expr glue::glue("Estimated event sequence models, stratified by sex. {compact_fig_caption}")
#| fig-cap-location: top

plot_compact_pvd(
  figs = list(
    fig_males_first,
    fig_females_first
  ),
  facet_label = c("Males <br>", "Females <br>"),
  y_text_size = 11
)

```

{{< pagebreak >}}

```{r}
#| label: "fig-first-only-change"
#| column: page
#| fig-height: !expr pvd_line_height
#| fig-width: !expr pvd_line_width
#| fig-cap: "Change in estimated event sequence models by sex"
#| fig-cap-location: top

list(
    "Males" = fig_males_first,
    "Females" = fig_females_first
  ) |> 
pvd_lineplot(y_text_size = 11)

```

{{< pagebreak >}}

```{r}
#| label: "fig-pvd-by-cgg"
#| column: page
#| fig-height: !expr pvd_height
#| fig-width: !expr pvd_width
#| fig-cap: !expr glue::glue("Estimated event sequences, stratified by CGG repeats (<100 vs 100+). {compact_fig_caption}")

list(
    fig_under100,
    fig_over100
  ) |> 
plot_compact_pvd(
  facet_label_prefix = c("CGG &lt; 100 <br>", "CGG &ge; 100 <br>"),
  y_text_size = 11
)

```

{{< pagebreak >}}

```{r}
#| label: "fig-pvd-by-cgg-change"
#| column: page
#| fig-height: !expr pvd_line_height
#| fig-width: !expr pvd_line_width
#| fig-cap: "Change in estimated event sequences by CGG repeats (<100 vs 100+)"
#| fig-cap-location: top

list(
  "CGG &lt; 100" = fig_under100,
  "CGG &ge; 100" = fig_over100) |>
pvd_lineplot(y_text_size = 11)

```

{{< pagebreak >}}

```{r}
#| label: fig-pvd-by-cgg-male
#| column: page
#| fig-height: !expr pvd_height
#| fig-width: !expr pvd_width
#| fig-cap: !expr glue::glue("Estimated event sequences, stratified by CGG repeats (<100 vs 100+), males only. {compact_fig_caption}")
#| fig-cap-location: top

list(
    "Males, CGG &lt; 100 <br>" = fig_under100_males,
    "Males, CGG &ge; 100  <br>" = fig_over100_males
  ) |> 
plot_compact_pvd(y_text_size = 11)

```

{{< pagebreak >}}

```{r}
#| label: "fig-pvd-by-cgg-male-change"
#| column: page
#| fig-height: !expr pvd_line_height
#| fig-width: !expr pvd_line_width
#| fig-cap: "Change in estimated event sequences by CGG repeats (<100 vs 100+), males only"
#| fig-cap-location: top

list(
    "Males, CGG &lt; 100" = fig_under100_males,
    "Males, CGG &ge; 100" = fig_over100_males
  ) |> 
pvd_lineplot(y_text_size = 11)

```

{{< pagebreak >}}

```{r}
#| label: fig-pvd-by-cgg-female
#| column: page
#| fig-height: !expr pvd_height
#| fig-width: !expr pvd_width
#| fig-cap: !expr glue::glue("Estimated event sequences, stratified by CGG repeats (<100 vs 100+); females only. {compact_fig_caption}")
#| fig-cap-location: top

plot_compact_pvd(
  figs = list(
    fig_under100_females,
    fig_over100_females
  ),
  facet_label = c("Females, CGG &lt; 100  <br>", "Females, CGG &ge; 100  <br>"),
  y_text_size = 11
)

```

{{< pagebreak >}}

```{r}
#| label: "fig-pvd-by-cgg-female-change"
#| column: page
#| fig-height: !expr pvd_line_height
#| fig-width: !expr pvd_line_width
#| fig-cap: "Change in estimated event sequences by CGG repeats (<100 vs 100+); females only"
#| fig-cap-location: top

pvd_lineplot(
  figs = list(
    fig_under100_females,
    fig_over100_females
  ),
  facet_label = c("Females, CGG &lt; 100", "Females, CGG &ge; 100"),
  y_text_size = 11
)

```

{{< pagebreak >}}

```{r}
#| label: fig-pvd-by-gender-cgg_under100
#| column: page
#| fig-height: !expr pvd_height
#| fig-width: !expr pvd_width
#| fig-cap: !expr glue::glue("Estimated event sequences, stratified by sex, for CGG repeats <100. {compact_fig_caption}")
#| fig-cap-location: top

plot_compact_pvd(
  figs = list(
    fig_under100_males,
    fig_under100_females
  ),
  facet_label = c("CGG &lt; 100, Males  <br>", "CGG &lt; 100, Females  <br>"),
  y_text_size = 11
)

```

{{< pagebreak >}}

```{r}
#| label: "fig-pvd-by-gender-cgg_under100-change"
#| column: page
#| fig-height: !expr pvd_line_height
#| fig-width: !expr pvd_line_width
#| fig-cap: "Change in estimated event sequences by sex, for CGG repeats <100"
#| fig-cap-location: top

pvd_lineplot(
  figs = list(
    fig_under100_males,
    fig_under100_females
  ),
  facet_label = c("CGG &lt; 100, Males", "CGG &lt; 100, Females"),
  y_text_size = 11
)

```

{{< pagebreak >}}

```{r}
#| label: fig-pvd-by-gender-cgg_over100
#| column: page
#| fig-height: !expr pvd_height
#| fig-width: !expr pvd_width
#| fig-cap: !expr glue::glue("Estimated event sequences, stratified by sex, for CGG repeats ≥100. {compact_fig_caption}")
#| fig-cap-location: top

plot_compact_pvd(
  figs = list(
    fig_over100_males,
    fig_over100_females
  ),
  facet_label = c("CGG &ge; 100, Males  <br>", "CGG &ge; 100, Females  <br>"),
  y_text_size = 11
)

```

{{< pagebreak >}}

```{r}
#| label: "fig-pvd-by-gender-cgg_over100-change"
#| column: page
#| fig-height: !expr pvd_line_height
#| fig-width: !expr pvd_line_width
#| fig-cap: "Change in estimated event sequences by sex, for CGG repeats ≥100"
#| fig-cap-location: top

pvd_lineplot(
  figs = list(
    fig_over100_males,
    fig_over100_females
  ),
  facet_label = c("CGG &ge; 100, Males", "CGG &ge; 100, Females"),
  y_text_size = 11
)

```

{{< pagebreak >}}

```{r}
#| fig-cap: "Cross-validation information criterion"
#| label: fig-cvic
#| eval: !expr fit_models

temp$CVIC |> plot_CVIC()

```

{{< pagebreak >}}


```{r}
#| fig-cap: "Test set log-likelihood across folds"
#| fig-height: 6
#| label: fig-oofll
#| eval: !expr fit_models

temp$loglike_matrix |> plot_cv_loglik()

```

{{< pagebreak >}}

```{r}
#| label: extract-PVD-selected-subtypes
figs = extract_figs_from_pickle(
  size.y = size.y,
  n_s = n_s_selected,
  dataset_name = dataset_name,
  output_folder = output_folder)
```


```{r}
#| label: fig-pvd_chosen_subtypes
#| fig-height: !expr pvd_height
#| fig-width: !expr pvd_width
#| fig-cap: !expr glue::glue("positional variance diagrams for {n_s_selected} subtypes. {compact_fig_caption}")
#| fig-cap-location: top
#| column: page
library(ggplot2)

# figs |> print_PVDs()

plot_compact_pvd(
  figs = figs,
  tile_height = 2,
  facet_label_prefix = NULL,
  y_text_size = 8
)

```

{{< pagebreak >}}

```{r}
#| label: fig-stage-by-age
#| fig-cap: "Estimated progression stage by age and latent subtype"
#| include: true

stages = 
  results_cv_max$subtype_and_stage_table |> 
  mutate(
    age = patient_data$`Age at visit`,
    id = patient_data$`FXS ID`
  )

library(ggplot2)
stages |>
  graph_stage_by_age()
  
```

{{< pagebreak >}}

# Supplementary material {.appendix}

```{r}
#| label: tbl-ex-incomplete-data
#| tbl-cap: "Distribution of ataxia severity among cases"

table1(
  na.is.category = FALSE,
  data = v1_usable_cases, 
  x = ~ `Ataxia: severity*`)
```


{{< pagebreak >}}

```{r}
#| label: fig-hist-CGG-gp34-v1
#| fig-cap: "Distribution of CGG repeats by sex, among study participants included in analysis"
#| warning: false

v1_usable |> graph_CGG_repeats(rows = vars(Gender))
```

{{< pagebreak >}}

{{< include general-data-notes.qmd >}}

## Hypothesis testing {.appendix #sec-permutation-test}

```{r}
obs_stat = pval_sex_gp34_v1  |> attr("observed_test_stat")
perm_stats = pval_sex_gp34_v1  |> attr("permuted_test_stats")
n_perm_over_obs = sum(perm_stats >= obs_stat)
pct_perm_over_obs = mean(perm_stats >= obs_stat)
```

@fig-permute-llik-sex illustrates the permutation test approach that we implemented to compare event orderings between subgroups.
This figure compares the mean log-likelihood for the sex-stratified model 
to the distribution of mean log-likelihoods when sex is permuted.
Only `r n_perm_over_obs` out of `r length(perm_stats)` permuted mean-log-likelihoods 
were larger than the observed mean-log-likelihood
(`r pct_perm_over_obs |> scales::percent(accuracy = 0.1)`),
resulting in a two-sided p-value of $2 \times `r pct_perm_over_obs` = `r 2*pct_perm_over_obs`$.

{{< pagebreak >}}

```{r}
#| fig-cap: "Histogram of mean log-likelihoods for GP34 visit 1 data, permuted by sex"
#| label: fig-permute-llik-sex

pval_sex_gp34_v1 |> autoplot() |> print()
```

{{< pagebreak >}}

## Results with repeated measures {#sec-longitudinal-results .appendix}

{{< include longitudinal-results.qmd >}}

## Detecting latent subtypes {#sec-subtypes .appendix}

In order to use the Ordinal SuStaIn modeling algorithm, we must specify how many latent subtypes to include in the model. There are several metrics for determining the optimal number of subtypes for a given data set.

### Likelihood {.appendix}

The simplest option is to compare the likelihood of the data for the fitted model while varying the number of subtypes used to fit the model. @fig-mcmc-loglik shows the distribution of log-likelihoods from the MCMC samples for the full dataset (not stratified by sex or CGG repeats). Adding up to 6 clusters substantially improves the log-likelihood.

```{r}
#| fig-height: 4
#| fig-width: 6
#| label: fig-mcmc-loglik
#| fig-cap: log-likelihoods of MCMC samples, by number of subtypes
#| eval: !expr fit_models

lliks = results_v1 |> 
  sapply(F = function(x) x$samples_likelihood)

lliks |>
  graph_likelihoods_v2(alpha = 0.5) |>
  suppressWarnings()

```

{{< pagebreak >}}

### Cross-Validation Information Criterion {#sec-cvic .appendix}

Since models with fewer subtypes are limited special cases of models with more subtypes (i.e., "nested models"), the likelihood of the training data is guaranteed to improve as we increase the number of subtypes. However, using too many subtypes means there is less data available for each subtype, possibly leading to a model that does not generalize well to new data (i.e., a model that is "overfit" to the training data).

To avoid overfitting, @young2018uncovering recommends choosing the optimal number using the Cross-Validation Information Criterion (CVIC) (@eq-def-cvic).

Let:

* $n$ be the number of observations in the dataset
* $Y_i$ be the observed biomarker values for the $i^{th}$ participant
* $\mathcal C$ be the number of latent subtypes assumed, with corresponding index $c$.
* $C_i$ be the latent subtype membership of observation $i$
* $\mathcal S$ be the set of possible event sequences, indexed by $\mathcal s$
* $S_c \in \mathcal S$ be the sequence for subtype $c$
* $K$ be the number of cross-validation folds, with index $k$; typically, $K = 10$.
* $n_k$ be the number of held-out observations in cross-validation fold $K$; $n_k \approx n/K$
* $\hat{P}_{(-k)}(C = c)$ be the prior probability that an observation belongs to subtype $c$, estimated using all observations except those in fold $k$.

Then the Cross-Validation Information Criterion (CVIC) is defined as:

$$
CVIC_{\mathcal C} = 
-2 * 
\sum_{k=1}^K 
\sum_{i=1}^{n_k} 
\log
\left\{
\sum_{c=1}^\mathcal C 
\sum_{s\in \mathcal S}
\hat P(Y_i|C_i = c, S_c=s)
\hat{P}_{(-k)}(C_i = c, S_c = s)
\right\}
$${#eq-def-cvic}

### Out-of-fold log-likelihood criterion {#sec-oofll .appendix}

We also evaluated the consistency of our cross-validation procedure by looking at the distribution of out-of-fold log-likelihood ("OOFLL") across cross-validation folds; following @young2018uncovering, we calculated out-of-sample log-likelihood as:

$$
\ell_{\mathcal C, k} = 
\sum_{i = 1}^{n_k}
\sum_{c=1}^\mathcal C 
\sum_{s\in \mathcal S}
\log
\left\{
\hat P(Y_i|C_i = c, S_c=s)
\right\}
\hat{P}_{(-k)}(C_i = c, S_c = s)
$$ {#eq-def-oof-llik}

@fig-oofll shows the distribution of the OOFLL statistic
as a function of number of latent subgroups.

{{< pagebreak >}}

::: landscape
## Additional data tables {.appendix}

The following tables summarize the distributions of the biomarkers 
that we analyzed in this paper, stratified by sex and CGG level.

{{< pagebreak >}}

{{< include exploration.qmd >}}
:::
