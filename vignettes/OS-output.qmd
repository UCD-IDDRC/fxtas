---
title: "FXTAS sequence analysis"
format: 
  html: 
    author: 
      - name: Ezra Morrison
        email: demorrison@ucdavis.edu
      - Matt Ponzini
      - Kyoungmi Kim
    toc: false
    cap-location: top
    number-sections: true
    code-fold: true
    echo: false
    date: last-modified
    date-format: "[Last modified:] YYYY-MM-DD: H:mm:ss (A)"
    bibliography: references.bib

project:
  execute-dir: project
---

Here, we apply the Ordinal SuStaIn (**Su**btype and **St**age **In**ference) algorithm [@young2021ordinal] to find event sequences for FXTAS patients.

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  # fig.width = 7, 
  # fig.height = 10,
  include = TRUE
)
```

```{r setup}
#| message: false
devtools::load_all()
library(tidyverse)
library(reticulate)
```

```{r}
# reticulate::use_condaenv(condaenv = "fxtas")
```

```{r}
#| label: "set run parameters"
N_startpoints = 10L
N_S_max = 4L
N_iterations_MCMC = 1e5L
dataset_name = 'sample_data'
root_dir = here::here()
setwd(root_dir)
output_folder = 
  "output/output.longer" |> 
  fs::dir_create()

synchronize_y_axes = FALSE
```

```{r}

biomarker_group_list = compile_biomarker_group_list()

biomarker_group_colors = 
  tibble(
    biomarker_group = names(biomarker_group_list),
    # group_color = rainbow()
    group_color = 
      length(biomarker_group_list) |> 
      RColorBrewer::brewer.pal(n = _, name = "Paired")
  )

biomarker_groups = 
  biomarker_group_list |> 
  stack() |> 
  as_tibble() |> 
  rename(
    biomarker  = values,
    biomarker_group = ind) |> 
  left_join(
    biomarker_group_colors,
    by = "biomarker_group"
  ) |> 
  mutate(
    biomarker_group = 
      biomarker_group |> 
      factor(levels = names(biomarker_group_list)))

SuStaInLabels = 
  biomarker_varnames = 
  biomarker_groups |> 
  pull("biomarker")


df = 
  visit1 |> 
  select(
    `FXS ID`,
    `FX*`,
    all_of(biomarker_varnames)) |> 
  filter(
    !is.na(`FX*`))

biomarker_levels = 
  lapply(df[,biomarker_varnames], F = levels)

```

```{r}
biomarker_events_table =
  biomarker_levels |> 
  get_biomarker_events_table() |> 
  left_join(
    biomarker_groups, 
    by = "biomarker"
  ) |> 
  arrange(biomarker_group, biomarker, biomarker_level)

biomarker_plot_order =
  biomarker_events_table |>  pull(biomarker_level)

nlevs = 
  sapply(biomarker_levels, length)

```


```{r "convert factors to numeric"}
df = df |>
  mutate(
    across(
      all_of(biomarker_varnames), 
      ~ as.numeric(.x) - 1)
  )

```

```{r}

ModelScores = DataScores = 
  df |> 
  select(all_of(biomarker_varnames)) |> 
  # lapply(F = levels)
  compute_score_levels()


control_data = 
  df |> 
  filter(`FX*` == "CGG < 55") |> 
  select(all_of(biomarker_varnames))

patient_data = 
  df |> 
  # na.omit() |>
  filter(`FX*` == "CGG >= 55")

prob_correct = 
  control_data |> 
  compute_prob_correct(
    max_prob = .95,
    biomarkers = biomarker_varnames,
    DataScores = DataScores)

prob_dist = compute_prob_dist(
  ModelScores,
  DataScores,
  biomarker_varnames,
  prob_correct
)

prob_nl_dist = prob_dist[1, , ]
prob_score_dist = prob_dist[-1, , ]

```

```{r}

prob_score0 = compute_prob_scores(
    dataset = patient_data,
    biomarker_varnames,
    ModelScores,
    DataScores,
    prob_dist
  )
 
prob_nl = prob_score0[,,1]
prob_score = prob_score0[,,-1, drop = FALSE]

```

```{r "score_vals"}

# sapply(X = biomarker_varnames, F = function(x) 1:nlevs[x])

score_vals = matrix(
  ModelScores[-1] |> as.numeric(),
  byrow = TRUE,
  nrow = length(biomarker_varnames),
  ncol = length(ModelScores) - 1,
  dimnames = list(biomarker_varnames, ModelScores[-1]))

for (i in biomarker_varnames)
{
  score_vals[i,score_vals[i,] > nlevs[i]-1] = 0
}

```

# positional variance diagrams (PVDs) by number of subgroups

## one subgroup

```{r}
#| label: "confusion matrices - 1 group"
#| column: screen-inset
#| fig-height: 15
#| fig-cap: "Confusion Matrices: 1 subgroup"

figs = extract_figs_from_pickle(
  n_s = 1,
  dataset_name = dataset_name,
  output_folder = output_folder,
  score_vals = score_vals,
  biomarker_plot_order = NULL,
  
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels) 
print(figs[[1]])
```

## two subgroups

```{r}
#| label: "confusion matrices - 2 groups"
#| layout-ncol: 1
#| fig-height: 15
#| fig-cap: "Confusion Matrices: 2 subgroups"
#| column: screen-inset
#| fig-subcap: 
#|   - "Group 1"
#|   - "Group 2"
biomarker_plot_order2 = NULL
figs = extract_figs_from_pickle(
  synchronize_y_axes = synchronize_y_axes,
  n_s = 2,
  dataset_name = dataset_name,
  output_folder = output_folder,
  score_vals = score_vals,
  biomarker_plot_order = biomarker_plot_order2,
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)
figs |> 
  print_PVDs()

```

## References{.unnumbered}

::: {#refs}
:::
