---
title: "Ordinal SuStaIn"
format: 
  html: 
    toc: true
    cap-location: top
    number-sections: true
    code-fold: true
project:
  execute-dir: project
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.width = 7, 
  fig.height = 7,
  include = TRUE
)
```

```{r setup}

devtools::load_all()
library(tidyverse)
library(reticulate)
```

```{r}
# reticulate::use_condaenv(condaenv = "fxtas")
```


# Import data

```{r}

tremors = c(
  "Head tremor" = 1,
  "Intention tremor" = 1,
  "Resting tremor" = 1,
  "Postural tremor" = 1,
  "Intermittent tremor" = 1
  # "Any tremor" = 1
)

parkinsons_vars = 
  vars = grep("Parkinson", value = TRUE, names(gp34))

mri_vars = c(
  "Cerebral Atrophy",
  "Cerebellar Atrophy",
  "Cerebral WM Hyperintensity",
  "Cerebellar WM Hyperintensity",
  "MCP-WM Hyperintensity",
  "Pons-WM Hyperintensity",
  "Sub-Insular WM Hyperintensity",
  "Periventricular WM Hyperintensity",
  "Splenium (CC)-WM Hyperintensity",
  "Genu (CC)-WM Hyperintensity",
  "Corpus Callosum-Thickness"
)

cancer_vars =  c(
  "Thyroid Cancer",
  "Skin Cancer",
  "Melanoma",
  "Prostate Cancer",
  "Other Cancer"
)

ataxia = c(
  "Ataxia",
  "Ataxia: severity*"
  # grep("Parkinson", value = TRUE, names(visit1))
)

scid_vars = 
  vars = c(
    "Bipolar I Disorder (MD01), Lifetime",
    "Bipolar II Disorder (MD02), Lifetime",
    "Other Bipolar Disorder (MD03), Lifetime",
    "Major Depressive Disorder (MD04), Lifetime",
    "Mood Disorder Due to GMC (MD07), Lifetime",
    "Substance-Induced Mood Dis. (MD08), Lifetime",
    "Primary Psychotic Symptoms (PS01), Lifetime"
  )

cantab_vars = c(
  "SWM Between errors*",
  # "SST Median correct RT on GO trials*",
  "RVP A signal detection*",
  # "OTS Problems solved on first choice*",
  "PAL Total errors (adjusted)*",
  "RTI Five-choice movement time*") 

scores = 
  c(
    "MMSE Total Score*",
    "BDS-2 Total Score*")

thyroid_vars = c(
  "Hypothyroid",
  "Hyperthyroid",
  "Thyroid problems",
  "Lupus",
  "Rheumatoid arthritis",
  "Multiple Sclerosis: Workup",
  "ANA positive",
  "Sjogrens Syndrome",
  "Raynauds Syndrome"
  # "Pulmonary Fibrosis" # none
  # "Immunological Notes"
  
  
)

scl90_vars = 
  grep(
    value = TRUE, 
    names(gp34), 
    pattern = "^SCL90.*\\*$") |> 
  sort()

thyroid_vars = c(
  "Hypothyroid",
  "Hyperthyroid",
  "Thyroid problems",
  "Lupus",
  "Rheumatoid arthritis",
  "Multiple Sclerosis: Workup",
  "ANA positive",
  "Sjogrens Syndrome",
  "Raynauds Syndrome",
  "Pulmonary Fibrosis"
  # "Immunological Notes"
  
  
)
kinesia_vars = c(
      "Left: Rest Tremor",
      "Left: Postural Tremor",
      "Left: Kinetic Tremor",
      "Right: Rest Tremor",
      "Right: Postural Tremor",
      "Right: Kinetic Tremor"
    )

biomarker_group_list = 
  list(
    tremors = names(tremors),
    ataxia = ataxia,
    stage = "FXTAS Stage (0-5)*",
    parkinsons = parkinsons_vars,
    cancer = cancer_vars,
    mri = mri_vars,
    scores = scores,
    scid = scid_vars,
    scl90 = scl90_vars,
    cantab = cantab_vars,
    thyroid = thyroid_vars,
    kinesia = kinesia_vars
  )

biomarker_group_colors = 
  tibble(
    biomarker_group = names(biomarker_group_list),
    # group_color = rainbow()
    group_color = 
      length(biomarker_group_list) |> 
      RColorBrewer::brewer.pal(n = _, name = "Set3")
  )

biomarker_groups = 
  biomarker_group_list |> 
  stack() |> 
  as_tibble() |> 
  rename(
    biomarker  = values,
    biomarker_group = ind) |> 
  left_join(
    biomarker_group_colors,
    by = "biomarker_group"
  ) |> 
  mutate(
    biomarker_group = 
      biomarker_group |> 
      factor(levels = names(biomarker_group_list)))

SuStaInLabels = 
  biomarker_varnames = 
  biomarker_groups |> 
  pull("biomarker")


df = 
  visit1 |> 
  select(
    `FXS ID`,
    `FX*`,
    all_of(biomarker_varnames)) |> 
  filter(
    !is.na(`FX*`))

biomarker_levels = 
  lapply(df[,biomarker_varnames], F = levels)

biomarker_events_table =
  biomarker_levels |> 
  get_biomarker_events_table() |> 
  left_join(
    biomarker_groups, 
    by = "biomarker"
  ) |> 
  arrange(biomarker_group, biomarker, biomarker_level)
biomarker_plot_order =
  biomarker_events_table |>  pull(biomarker_level)

nlevs = 
  sapply(biomarker_levels, length)

df = df |>
  mutate(
    across(
      all_of(biomarker_varnames), 
      ~ as.numeric(.x) - 1)
  )

```

# Set up data for new version of SuStaIn
The objective here is two create to variables:

* `p_NL` -- a subject x region matrix indicating the p that a region is normal for a subject.
* `p_score` -- a subject x (region * score) matrix indicating p that a region is a given score.

Ps should be non-zero. 

```{r}

ModelScores = DataScores = 
  df |> 
  select(all_of(biomarker_varnames)) |> 
  # lapply(F = levels)
  compute_score_levels()

control_data = 
  df |> 
  filter(`FX*` == "CGG < 55") |> 
  select(all_of(biomarker_varnames))

patient_data = 
  df |> 
  # na.omit() |>
  filter(`FX*` == "CGG >= 55")

prob_correct = 
  control_data |> 
  compute_prob_correct(
    max_prob = .95,
    biomarkers = biomarker_varnames,
    DataScores = DataScores)

prob_dist = compute_prob_dist(
  ModelScores,
  DataScores,
  biomarker_varnames,
  prob_correct
)

prob_nl_dist = prob_dist[1, , ]
prob_score_dist = prob_dist[-1, , ]

```

```{r}

prob_score0 = compute_prob_scores(
  dataset = patient_data,
  biomarker_varnames,
  ModelScores,
  DataScores,
  prob_dist,
  verbose = TRUE
)

prob_nl = prob_score0[,,1]
prob_score = prob_score0[,,-1, drop = FALSE]

```

```{r "score_vals"}

# sapply(X = biomarker_varnames, F = function(x) 1:nlevs[x])

score_vals = matrix(
  ModelScores[-1] |> as.numeric(),
  byrow = TRUE,
  nrow = length(biomarker_varnames),
  ncol = length(ModelScores) - 1,
  dimnames = list(biomarker_varnames, ModelScores[-1]))

for (i in biomarker_varnames)
{
  score_vals[i,score_vals[i,] > nlevs[i]-1] = 0
}

```

# Run SuStaIn model

```{r}
#| label: "set run parameters"
N_startpoints = 10L
N_S_max = 5L
N_iterations_MCMC = 1e5L
dataset_name = 'sample_data'
root_dir = here::here()
setwd(root_dir)
output_folder = "output/output.longer" |> fs::dir_create()
print(output_folder)
```

```{python "initialize-model"}

import pandas
import numpy as np
import numpy.matlib
import matplotlib.pyplot as plt
import seaborn as sns
import sys
import scipy
from glob import glob
import pySuStaIn
import os

print(os.getcwd())
os.chdir(r.root_dir)
print(os.getcwd())

sustain_input = pySuStaIn.OrdinalSustain(r.prob_nl,
r.prob_score,
r.score_vals,
r.SuStaInLabels,
r.N_startpoints,
r.N_S_max, 
r.N_iterations_MCMC, 
r.output_folder, 
r.dataset_name, 
False,
1)

```

# fitting model

```{python "fit-model"}
os.chdir(r.root_dir)
print(os.getcwd())
[samples_sequence, samples_f,
ml_subtype, prob_ml_subtype, ml_stage,
prob_ml_stage, prob_subtype_stage,
samples_likelihood] = sustain_input.run_sustain_algorithm(plot=False)
```

# graph confusion matrices in R

## one group

```{r}
#| label: "confusion matrices - 1 group"
#| layout-ncol: 1
#| fig-height: 8
#| fig-cap: "Confusion Matrices: 1 group"



figs = extract_figs_from_pickle(
  n_s = 1,
  dataset_name = dataset_name,
  output_folder = output_folder,
  score_vals = score_vals,
  biomarker_plot_order = NULL,
  
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels) 
print(figs[[1]])
```

## two groups

```{r}
#| label: "confusion matrices - 2 groups"
#| layout-ncol: 2
#| fig-height: 8
#| fig-cap: "Confusion Matrices: 2 subgroups"
#| fig-subcap: 
#|   - "Group 1"
#|   - "Group 2"
biomarker_plot_order2 = NULL
figs = extract_figs_from_pickle(
  n_s = 2,
  dataset_name = dataset_name,
  output_folder = output_folder,
  score_vals = score_vals,
  biomarker_plot_order = biomarker_plot_order2,
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)
figs |> 
  print_PVDs()

```

## three groups

```{r}
figs = extract_figs_from_pickle(
  n_s = 3,
  dataset_name = dataset_name,
  output_folder = output_folder,
  score_vals = score_vals,
  biomarker_plot_order = biomarker_plot_order2,
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)
```

```{r}
#| label: "confusion matrices"
#| layout-ncol: 3
#| fig-height: 8
#| fig-cap: "Confusion Matrices: 3 subgroups"
#| fig-subcap:
#|   - "Group 1"
#|   - "Group 2"
#|   - "Group 3"
library(ggplot2)

figs |> 
  print_PVDs()

```

## four groups

```{r}
figs = extract_figs_from_pickle(
  n_s = 4,
  dataset_name = dataset_name,
  output_folder = output_folder,
  score_vals = score_vals,
  biomarker_plot_order = biomarker_plot_order2,
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)
```

```{r}
#| label: "confusion matrices-4"
#| layout-ncol: 4
#| fig-height: 8
#| fig-cap: "Confusion Matrices: 4 subgroups"
#| fig-subcap:
#|   - "Group 1"
#|   - "Group 2"
#|   - "Group 3"
#|   - "Group 4"
figs |> 
  print_PVDs()
```


# graph likelihoods in R

```{r}
#| fig-height: 4
py$samples_likelihood |>
  graph_likelihoods_v2(alpha = 0.5) |>
  suppressWarnings()

```
