---
title: "Event sequences in Fragile X-associated tremor/ataxia syndrome"
format: 
  html: 
    author: 
      - name: Ezra Morrison
        email: demorrison@ucdavis.edu
      - Matt Ponzini
      - Kyoungmi Kim
      - (more to be added)
    toc: true
    embed-resources: true
    theme:
       light: 
         - cosmo
         - custom.scss
       dark: 
         - darkly
         - custom.scss
    cap-location: top
    css: custom.scss
    number-sections: true
    number-depth: 3
    html-math-method: mathjax
    fig-cap-location: top
    code-fold: true
    echo: false
    date: last-modified
    date-format: "[Last modified:] YYYY-MM-DD: H:mm:ss (A)"
    bibliography: references.bib

knitr:
  opts_chunk: 
    collapse: true
    comment: "#>" 
    R.options:  
      dev: svg

project:
  execute-dir: project
---

```{=html}
<style>
.quarto-figure-center > figure {
  text-align: center;
}
</style>
```

# Introduction

Here, we apply the Ordinal **Su**btype and **St**age **In**ference ("SuStaIn") algorithm [@young2021ordinal] to find event sequences for FXTAS patients.

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  # fig.width = 7, 
  # fig.height = 10,
  include = TRUE
)
```

```{r setup}
#| message: false
devtools::load_all()
library(tidyverse)
library(reticulate)
library(pander)
```

```{r}
# reticulate::use_condaenv(condaenv = "fxtas")
```

```{r}
#| label: "set run parameters"
#| 
fit_models = TRUE
# fit_models = FALSE
run_CV =  TRUE
# run_CV = FALSE

N_startpoints = 10L
N_S_max = 8L
N_S_max_sex = 1L
N_CV_folds = 10L
N_iterations_MCMC = 1e5L
dataset_name = 'sample_data'
root_dir = here::here()
setwd(root_dir)
output_folder = 
  "output/output.longest" |> 
  fs::dir_create()
synchronize_y_axes = FALSE
biomarker_plot_order2 = NULL

```

# Methods

## Data

The data come from the GP and GP4 studies. We analyzed one visit record per participant, using the earliest visit available across the two studies with age at visit $\ge 40$ years, resulting in `r nrow(visit1)` observations in total. However, `r visit1$"FX*" |> is.na() |> sum()` individuals did not have CGG values available, so only `r visit1$"FX*" |> not_na() |> sum()` individuals 
(`r (visit1$"FX**" == "CGG >= 55")|> sum()` cases and 
`r (visit1$"FX**" == "CGG < 55")|> sum()` controls) were included in the event sequence analysis.

```{r}

biomarker_groups = compile_biomarker_groups_table()

SuStaInLabels = 
  biomarker_varnames = 
  biomarker_groups |> 
  pull("biomarker")


df = 
  visit1 |> 
  filter(
    !is.na(`FX*`))

biomarker_levels = 
  lapply(df[,biomarker_varnames], F = levels)

df = df |>
  mutate(
    across(
      all_of(biomarker_varnames), 
      ~ as.integer(.x) - 1)
  ) |> 
  mutate(Diagnosis = as.integer(`FX*` == "CGG >= 55"))

biomarker_events_table =
  construct_biomarker_events_table(
    biomarker_levels,
    biomarker_groups)

biomarker_plot_order =
  biomarker_events_table |>  pull(biomarker_level)

nlevs = 
  sapply(biomarker_levels, length)

```

We analyzed `r length(biomarker_levels)` biomarkers (@tbl-biomarker-list) with a total of `r nrow(biomarker_events_table)` non-baseline levels; each level above baseline constitutes an outcome event in the disease progression modelling analysis (@sec-Statistical-analysis).

```{r}
#| tbl-cap: "Biomarkers used in analysis"
#| label: "tbl-biomarker-list"
table_out =
  biomarker_events_table |> 
  select(category = biomarker_group, biomarker, levels) |> 
  slice_head(by = biomarker)

table_out |> 
  pander()

```

The trailing asterisk (*) indicates a numeric variable that has been categorized for use with Ordinal SusTaIn.

## Statistical analysis {#sec-Statistical-analysis}

We applied  the Ordinal **Su**btype and **St**age **In**ference ("SuStaIn") algorithm [@young2018uncovering; @young2021ordinal] to our dataset find event sequences and subgroupings for FXTAS patients. The Ordinal Subtype and Stage Inference (Ordinal SuStaIn) algorithm [@young2021ordinal] combines disease progression modelling [@fonteijn2012event] and unsupervised clustering to identify subgroups of individuals with distinct disease trajectories. SuStaIn simultaneously clusters individuals into subgroups and characterises the trajectory that
best defines each subgroup, thus capturing heterogeneity in both
disease subtype and disease stage.

Ordinal SuStaIn uses Markov Chain Monte Carlo (MCMC) sampling to estimate the Bayesian posterior probability of each subgroup progression pattern, assuming a uniform prior distribution over the set of all possible patterns. For each latent subgroup, we used   "positional variance diagrams" (@fig-pvd1 - @fig-pvd3) to display the the resulting marginal distributions of possible positions for each outcome event.

```{r}

ModelScores = DataScores = 
  df |> 
  select(all_of(biomarker_varnames)) |> 
  # lapply(F = levels)
  compute_score_levels()


control_data = 
  df |> 
  filter(`FX*` == "CGG < 55") |> 
  select(all_of(biomarker_varnames))

patient_data = 
  df |> 
  # na.omit() |>
  filter(`FX*` == "CGG >= 55")

prob_correct = 
  control_data |> 
  compute_prob_correct(
    max_prob = .95,
    biomarkers = biomarker_varnames,
    DataScores = DataScores)

prob_score0 = compute_prob_scores(
    dataset = patient_data,
    biomarker_varnames,
    ModelScores = ModelScores,
    DataScores = DataScores,
    prob_correct = prob_correct
  )
 
prob_nl = prob_score0[,,1]
prob_score = prob_score0[,,-1, drop = FALSE]

```

```{r "score_vals"}

# sapply(X = biomarker_varnames, F = function(x) 1:nlevs[x])

score_vals = matrix(
  ModelScores[-1] |> as.numeric(),
  byrow = TRUE,
  nrow = length(biomarker_varnames),
  ncol = length(ModelScores) - 1,
  dimnames = list(biomarker_varnames, ModelScores[-1]))

for (i in biomarker_varnames)
{
  score_vals[i,score_vals[i,] > nlevs[i]-1] = 0
}

save.image(file = fs::path(output_folder, "data.RData"))

```

```{r "run OSA from R"}
#| message: false
#| label: model-all-data
#| include: false
sustain_output = run_OSA(
  prob_score = prob_score0,
  score_vals = score_vals,
  SuStaInLabels = SuStaInLabels,
  N_startpoints = N_startpoints,
  N_S_max = N_S_max, 
  N_iterations_MCMC = N_iterations_MCMC, 
  output_folder = output_folder, 
  dataset_name = dataset_name, 
  use_parallel_startpoints = FALSE,
  seed = 1,
  plot = FALSE,
  patient_data = patient_data,
  N_CV_folds = N_CV_folds)

```

```{r}
#| message: false
#| label: model-males
#| include: false
sustain_output_males = run_OSA(
  prob_score = prob_score0[patient_data$Gender %in% "Male",,],
  score_vals = score_vals,
  SuStaInLabels = SuStaInLabels,
  N_startpoints = N_startpoints,
  N_S_max = N_S_max_sex, 
  N_iterations_MCMC = N_iterations_MCMC, 
  output_folder = output_folder, 
  dataset_name = "males", 
  use_parallel_startpoints = FALSE,
  seed = 1,
  plot = FALSE)

```


```{r}
#| message: false
#| label: model-females
#| include: false
sustain_output_females = run_OSA(
  prob_score = prob_score0[patient_data$Gender %in% "Female",,],
  score_vals = score_vals,
  SuStaInLabels = SuStaInLabels,
  N_startpoints = N_startpoints,
  N_S_max = N_S_max_sex, 
  N_iterations_MCMC = N_iterations_MCMC, 
  output_folder = output_folder, 
  dataset_name = "females", 
  use_parallel_startpoints = FALSE,
  seed = 1,
  plot = FALSE)

```
We ran the analysis for 1-6 latent subgroups, each with their own ordering. 

# Results

## Optimal number of clusters

@fig-mcmc-loglik shows the distribution of log-likelihoods from the MCMC samples for each number of clusters. Adding up to 6 clusters substantially improves the log-likelihood.

```{r}
#| fig-height: 4
#| label: fig-mcmc-loglik
#| fig-cap: log-likelihoods of MCMC samples, by number of subtypes
#| eval: !expr fit_models
sustain_output$samples_likelihood |>
  graph_likelihoods_v2(alpha = 0.5) |>
  suppressWarnings()

```

We can choose an optimal number of clusters using the Cross-Validation Information Criterion (CVIC) [@young2018uncovering, @gelman2014understanding] (@fig-cvic; details in @sec-cvic-math).

```{r}
#| fig-cap: "Cross-validation information criterion"
#| label: fig-cvic

library(ggplot2)

temp = sustain_output |> attr("CV")
temp$CVIC |> plot_CVIC()

```

We also evaluated the consistency of our cross-validation procedure by looking at the distribution of test-set log-likelihood across folds (@fig-boxplot-loglik-cv; details in @sec-cvic-math). 

```{r}
#| fig-cap: "Test set log-likelihood across folds"
#| label: fig-boxplot-loglik-cv
temp$loglike_matrix |> 
  plot_cv_loglik()

```


@fig-pvd1 - @fig-pvd6 show positional variance diagrams (PVDs) indicating the probability that each outcome event (y-axis) occurs at each sequence position (x-axis). 

## one subgroup

@fig-pvd1-1 shows the estimated event sequence for the combined GP and GP4 data, produced under the assumption that all individuals share the same event sequence; in other words, assuming no latent subgroups.

@fig-pvd1-2 and @fig-pvd1-3 show the estimated stratified event sequences for males and females modeled separately, now assuming all males share one event sequence and all females another event sequence; in other words, assuming no latent subgroups.

```{r}
#| label: "fig-pvd1"
#| column: screen
#| fig-height: 15
#| fig-align: center
#| fig-cap: "positional variance diagram assuming one subgroup - overall and stratified by sex"
#| fig-cap-location: top
#| layout-ncol: 3
#| fig-subcap:
#|   - "All data" 
#|   - "Males"
#|   - "Females"

figs = extract_figs_from_pickle(
  n_s = 1,
  dataset_name = dataset_name,
  output_folder = output_folder,
  score_vals = score_vals,
  biomarker_plot_order = NULL,
  
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)
print(figs[[1]])


fig_male = extract_figs_from_pickle(
  n_s = 1,
  dataset_name = "males",
  output_folder = output_folder,
  score_vals = score_vals,
  biomarker_plot_order = NULL,
  
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)
print(fig_male[[1]])

fig_female = extract_figs_from_pickle(
  n_s = 1,
  dataset_name = "females",
  output_folder = output_folder,
  score_vals = score_vals,
  biomarker_plot_order = NULL,
  
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)
print(fig_female[[1]])
```

## two subgroups

```{r}
n_s = 2
```


```{r}
#| label: "fig-pvd2"
#| layout-ncol: 2
#| fig-height: 15
#| fig-cap: "positional variance diagrams for 2 subgroups"
#| fig-cap-location: top
#| fig-align: center
#| column: screen
#| fig-subcap: 
#|   - "Subgroup 1"
#|   - "Subgroup 2"

figs = extract_figs_from_pickle(
  synchronize_y_axes = synchronize_y_axes,
  n_s = n_s,
  dataset_name = dataset_name,
  output_folder = output_folder,
  score_vals = score_vals,
  biomarker_plot_order = biomarker_plot_order2,
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)
figs |> 
  print_PVDs()

```

```{r}
#| tbl-cap: !expr glue::glue("Subgroups by gender ({n_s} subgroups)")
#| label: tbl-sg_by_sex_2
#| results: asis

results = extract_results_from_pickle(
  n_s = n_s,
  dataset_name = dataset_name,
  output_folder = output_folder,
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)

table_subtype_by_demographics(
    patient_data,
    subtype_and_stage_table = results$subtype_and_stage_table
    )
```

### Stratified by sex

#### Males only

```{r}
#| label: "fig-pvd2-male"
#| layout-ncol: 2
#| fig-height: 15
#| fig-cap: "positional variance diagrams for 2 subgroups - males only"
#| fig-cap-location: top
#| fig-align: center
#| column: screen
#| fig-subcap: 
#|   - "Subgroup 1"
#|   - "Subgroup 2"

figs = extract_figs_from_pickle(
  synchronize_y_axes = synchronize_y_axes,
  n_s = n_s,
  dataset_name = "males",
  output_folder = output_folder,
  score_vals = score_vals,
  biomarker_plot_order = biomarker_plot_order2,
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)
figs |> 
  print_PVDs()

```

#### Females only

```{r}
#| label: "fig-pvd2-female"
#| layout-ncol: 2
#| fig-height: 15
#| fig-cap: "positional variance diagrams for 2 subgroups - males only"
#| fig-cap-location: top
#| fig-align: center
#| column: screen
#| fig-subcap: 
#|   - "Subgroup 1"
#|   - "Subgroup 2"

figs = extract_figs_from_pickle(
  synchronize_y_axes = synchronize_y_axes,
  n_s = n_s,
  dataset_name = "females",
  output_folder = output_folder,
  score_vals = score_vals,
  biomarker_plot_order = biomarker_plot_order2,
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)
figs |> 
  print_PVDs()

```


## three subgroups

```{r}
n_s = 3
```

```{r}
figs = extract_figs_from_pickle(
  synchronize_y_axes = synchronize_y_axes,
  n_s = n_s,
  dataset_name = dataset_name,
  output_folder = output_folder,
  score_vals = score_vals,
  biomarker_plot_order = biomarker_plot_order2,
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)
```

```{r}
#| label: "fig-pvd3"
#| layout-ncol: 3
#| fig-height: 15
#| fig-align: center
#| fig-cap: "positional variance diagrams for 3 subgroups"
#| fig-cap-location: top
#| column: screen
#| fig-subcap:
#|   - "Subgroup 1"
#|   - "Subgroup 2"
#|   - "Subgroup 3"
library(ggplot2)

figs |> 
  print_PVDs()

```

```{r}
#| tbl-cap: !expr glue::glue("Subgroups by gender ({n_s} subgroups)")
#| label: tbl-sg_by_sex_3
#| results: asis

results = extract_results_from_pickle(
  n_s = n_s,
  dataset_name = dataset_name,
  output_folder = output_folder,
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)

table_subtype_by_demographics(
    patient_data,
    subtype_and_stage_table = results$subtype_and_stage_table
    )
```

```{r}
n_s = 4
```


## four subgroups

```{r}
figs = extract_figs_from_pickle(
  synchronize_y_axes = synchronize_y_axes,
  n_s = 4,
  dataset_name = dataset_name,
  output_folder = output_folder,
  score_vals = score_vals,
  biomarker_plot_order = biomarker_plot_order2,
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)
```

```{r}
#| label: "fig-pvd4"
#| layout-ncol: 4
#| fig-height: 15
#| fig-align: center
#| fig-cap: "positional variance diagrams for 4 subgroups"
#| fig-cap-location: top
#| column: screen
#| fig-subcap:
#|   - "Subgroup 1"
#|   - "Subgroup 2"
#|   - "Subgroup 3"
#|   - "Subgroup 4"
library(ggplot2)

figs |> 
  print_PVDs()

```

```{r}
#| tbl-cap: !expr glue::glue("Subgroups by gender ({n_s} subgroups)")
#| label: tbl-sg_by_sex_4
#| results: asis

results = extract_results_from_pickle(
  n_s = n_s,
  dataset_name = dataset_name,
  output_folder = output_folder,
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)

table_subtype_by_demographics(
    patient_data,
    subtype_and_stage_table = results$subtype_and_stage_table
    )
```

```{r}
n_s = 5
```

## five subgroups

```{r}
figs = extract_figs_from_pickle(
  synchronize_y_axes = synchronize_y_axes,
  n_s = 5,
  dataset_name = dataset_name,
  output_folder = output_folder,
  score_vals = score_vals,
  biomarker_plot_order = biomarker_plot_order2,
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)
```

```{r}
#| label: "fig-pvd5"
#| layout-ncol: 3
#| fig-height: 15
#| fig-align: center
#| fig-cap: "positional variance diagrams for 5 subgroups"
#| fig-cap-location: top
#| column: screen
#| fig-subcap:
#|   - "Subgroup 1"
#|   - "Subgroup 2"
#|   - "Subgroup 3"
#|   - "Subgroup 4"
#|   - "Subgroup 5"
library(ggplot2)

figs |> 
  print_PVDs()

```

```{r}
#| tbl-cap: !expr glue::glue("Subgroups by gender ({n_s} subgroups)")
#| label: tbl-sg_by_sex_5
#| results: asis

results = extract_results_from_pickle(
  n_s = n_s,
  dataset_name = dataset_name,
  output_folder = output_folder,
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)

table_subtype_by_demographics(
    patient_data,
    subtype_and_stage_table = results$subtype_and_stage_table
    )
```

```{r}
n_s = 6
```

## six subgroups

```{r "build-figs-6sg"}
figs = extract_figs_from_pickle(
  synchronize_y_axes = synchronize_y_axes,
  n_s = 6,
  dataset_name = dataset_name,
  output_folder = output_folder,
  score_vals = score_vals,
  biomarker_plot_order = biomarker_plot_order2,
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)
```

```{r}
#| label: "fig-pvd6"
#| layout-ncol: 3
#| fig-height: 15
#| fig-align: center
#| fig-cap: "positional variance diagrams for 6 subgroups"
#| fig-cap-location: top
#| column: screen
#| fig-subcap:
#|   - "Subgroup 1"
#|   - "Subgroup 2"
#|   - "Subgroup 3"
#|   - "Subgroup 4"
#|   - "Subgroup 5"
#|   - "Subgroup 6"
library(ggplot2)

figs |> 
  print_PVDs()

```

```{r}
#| tbl-cap: !expr glue::glue("Subgroups by gender ({n_s} subgroups)")
#| label: tbl-sg_by_sex_6
#| results: asis

results = extract_results_from_pickle(
  n_s = n_s,
  dataset_name = dataset_name,
  output_folder = output_folder,
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)

table_subtype_by_demographics(
    patient_data,
    subtype_and_stage_table = results$subtype_and_stage_table
    )
```

# Discussion

[to be added]

# References {.unnumbered}

::: {#refs}
:::

# Appendix {.appendix}

## Mathematical details of cross-validation criteria {#sec-cvic-math}

Let:

* $n$ be the number of observations in the dataset
* $Y_i$ be the observed biomarker values for the $i^{th}$ participant
* $\mathcal C$ be the number of latent subtypes assumed, with corresponding index $c$.
* $C_i$ be the latent subgroup membership of observation $i$
* $\mathcal S$ be the set of possible event sequences, indexed by $\mathcal s$
* $S_c \in \mathcal S$ be the sequence for subgroup $c$
* $K$ be the number of cross-validation folds, with index $k$; typically, $K = 10$.
* $n_k$ be the number of held-out observations in cross-validation fold $K$; $n_k \approx n/K$
* $\hat{P}_{(-k)}(C = c)$ be the prior probability that an observation belongs to subgroup $c$, estimated using all observations except those in fold $k$.

Then:

$$
CVIC_{\mathcal C} = 
-2 * 
\sum_{k=1}^K 
\sum_{i=1}^{n_k} 
\log
\left\{
\sum_{c=1}^\mathcal C 
\sum_{s\in \mathcal S}
\hat P(Y_i|C_i = c, S_c=s)
\hat{P}_{(-k)}(C_i = c, S_c = s)
\right\}
$$

@young2018uncovering also calculated out-of-sample log-likelihood as:

$$
\ell_{\mathcal C, k} = 
\sum_{i = 1}^{n_k}
\sum_{c=1}^\mathcal C 
\sum_{s\in \mathcal S}
\log
\left\{
\hat P(Y_i|C_i = c, S_c=s)
\right\}
\hat{P}_{(-k)}(C_i = c, S_c = s)
$$
