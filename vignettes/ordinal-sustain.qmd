---
title: "Event sequences in Fragile X-associated tremor/ataxia syndrome"
format: 
  html: 
    author: 
      - name: Ezra Morrison
        email: demorrison@ucdavis.edu
      - Matt Ponzini
      - Kyoungmi Kim
      - (more to be added)
    toc: true
    embed-resources: true
    theme:
       light: 
         - cosmo
         - custom.scss
       dark: 
         - darkly
         - custom.scss
    cap-location: top
    css: custom.scss
    number-sections: true
    number-depth: 3
    html-math-method: mathjax
    fig-cap-location: top
    code-fold: true
    echo: false
    date: last-modified
    date-format: "[Last modified:] YYYY-MM-DD: H:mm:ss (A)"
    bibliography: references.bib

knitr:
  opts_chunk: 
    collapse: true
    comment: "#>" 
    R.options:  
      dev: svg

project:
  execute-dir: project
---

```{=html}
<style>
.quarto-figure-center > figure {
  text-align: center;
}
</style>
```

# Introduction

Here, we apply the Ordinal **Su**btype and **St**age **In**ference ("SuStaIn") algorithm [@young2021ordinal] to find event sequences for FXTAS patients.

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  # fig.width = 7, 
  # fig.height = 10,
  include = TRUE
)
```

```{r setup}
#| message: false
devtools::load_all()
library(tidyverse)
library(reticulate)
library(pander)
```

```{r}
# reticulate::use_condaenv(condaenv = "fxtas")
```

```{r}
#| label: "set run parameters"
N_startpoints = 10L
N_S_max = 6L
N_iterations_MCMC = 1e5L
dataset_name = 'sample_data'
root_dir = here::here()
setwd(root_dir)
output_folder = 
  "output/output.longest" |> 
  fs::dir_create()
synchronize_y_axes = FALSE
```

# Methods

## Data

The data come from the GP and GP4 studies. We analyzed one visit record per participant, using the earliest visit available across the two studies with age at visit $\ge 40$ years, resulting in `r nrow(visit1)` observations in total. However, `r visit1$"FX*" |> is.na() |> sum()` individuals did not have CGG values available, so only `r visit1$"FX*" |> not_na() |> sum()` individuals 
(`r (visit1$"FX**" == "CGG >= 55")|> sum()` cases and 
`r (visit1$"FX**" == "CGG < 55")|> sum()` controls) were included in the event sequence analysis.

```{r}

biomarker_group_list = 
  compile_biomarker_group_list()

biomarker_group_colors = 
  tibble(
    biomarker_group = names(biomarker_group_list),
    # group_color = rainbow()
    group_color = 
      length(biomarker_group_list) |> 
      # RColorBrewer::brewer.pal(n = _, name = "Paired")
      colorspace::qualitative_hcl(n = _, "Dark2")
  )

biomarker_groups = 
  biomarker_group_list |> 
  stack() |> 
  as_tibble() |> 
  rename(
    biomarker  = values,
    biomarker_group = ind) |> 
  left_join(
    biomarker_group_colors,
    by = "biomarker_group"
  ) |> 
  mutate(
    biomarker_group = 
      biomarker_group |> 
      factor(levels = names(biomarker_group_list)))

SuStaInLabels = 
  biomarker_varnames = 
  biomarker_groups |> 
  pull("biomarker")


df = 
  visit1 |> 
  select(
    `FXS ID`,
    `FX*`,
    all_of(biomarker_varnames)) |> 
  filter(
    !is.na(`FX*`))

biomarker_levels = 
  lapply(df[,biomarker_varnames], F = levels)

```

```{r}
biomarker_events_table =
  biomarker_levels |> 
  get_biomarker_events_table() |> 
  left_join(
    biomarker_groups, 
    by = "biomarker"
  ) |> 
  arrange(biomarker_group, biomarker, biomarker_level)

biomarker_plot_order =
  biomarker_events_table |>  pull(biomarker_level)

nlevs = 
  sapply(biomarker_levels, length)

```

We analyzed `r length(biomarker_levels)` biomarkers (@tbl-biomarker-list) with a total of `r nrow(biomarker_events_table)` non-baseline levels; each level above baseline constitutes an outcome event in the disease progression modelling analysis (@sec-Statistical-analysis).

```{r}
#| tbl-cap: "Biomarkers used in analysis"
#| label: "tbl-biomarker-list"
table_out =
  biomarker_events_table |> 
  select(category = biomarker_group, biomarker, levels) |> 
  slice_head(by = biomarker)

table_out |> 
  pander()

```



```{r "convert factors to numeric"}
df = df |>
  mutate(
    across(
      all_of(biomarker_varnames), 
      ~ as.numeric(.x) - 1)
  )

```

## Statistical analysis {#sec-Statistical-analysis}

We applied  the Ordinal **Su**btype and **St**age **In**ference ("SuStaIn") algorithm [@young2018uncovering; @young2021ordinal] to our dataset find event sequences and subgroupings for FXTAS patients. The Ordinal Subtype and Stage Inference (Ordinal SuStaIn) algorithm [@young2021ordinal] combines disease progression modelling [@fonteijn2012event] and unsupervised clustering to identify subgroups of individuals with distinct disease trajectories. SuStaIn simultaneously clusters individuals into subgroups and characterises the trajectory that
best defines each subgroup, thus capturing heterogeneity in both
disease subtype and disease stage.

Ordinal SuStaIn uses Markov Chain Monte Carlo (MCMC) sampling to estimate the Bayesian posterior probability of each subgroup progression pattern, assuming a uniform prior distribution over the set of all possible patterns. For each latent subgroup, we used   "positional variance diagrams" (@fig-pvd1 - @fig-pvd6) to display the the resulting marginal distributions of possible positions for each outcome event.

```{r}

ModelScores = DataScores = 
  df |> 
  select(all_of(biomarker_varnames)) |> 
  # lapply(F = levels)
  compute_score_levels()


control_data = 
  df |> 
  filter(`FX*` == "CGG < 55") |> 
  select(all_of(biomarker_varnames))

patient_data = 
  df |> 
  # na.omit() |>
  filter(`FX*` == "CGG >= 55")

prob_correct = 
  control_data |> 
  compute_prob_correct(
    max_prob = .95,
    biomarkers = biomarker_varnames,
    DataScores = DataScores)

prob_dist = compute_prob_dist(
  ModelScores,
  DataScores,
  biomarker_varnames,
  prob_correct
)

prob_nl_dist = prob_dist[1, , ]
prob_score_dist = prob_dist[-1, , ]

```

```{r}

prob_score0 = compute_prob_scores(
    dataset = patient_data,
    biomarker_varnames,
    ModelScores,
    DataScores,
    prob_dist
  )
 
prob_nl = prob_score0[,,1]
prob_score = prob_score0[,,-1, drop = FALSE]

```

```{r "score_vals"}

# sapply(X = biomarker_varnames, F = function(x) 1:nlevs[x])

score_vals = matrix(
  ModelScores[-1] |> as.numeric(),
  byrow = TRUE,
  nrow = length(biomarker_varnames),
  ncol = length(ModelScores) - 1,
  dimnames = list(biomarker_varnames, ModelScores[-1]))

for (i in biomarker_varnames)
{
  score_vals[i,score_vals[i,] > nlevs[i]-1] = 0
}

save.image(file = fs::path(output_folder, "data.RData"))

```

```{python "initialize-model"}

import pandas
import numpy as np
import numpy.matlib
import matplotlib.pyplot as plt
import seaborn as sns
import sys
import scipy
from glob import glob
import pySuStaIn
import os

os.chdir(r.root_dir)

sustain_input = pySuStaIn.OrdinalSustain(r.prob_nl,
r.prob_score,
r.score_vals,
r.SuStaInLabels,
r.N_startpoints,
r.N_S_max, 
r.N_iterations_MCMC, 
r.output_folder, 
r.dataset_name, 
False,
1)

```

```{python "fit-model"}
#| include: false
os.chdir(r.root_dir)
print(os.getcwd())
[samples_sequence, samples_f,
ml_subtype, prob_ml_subtype, ml_stage,
prob_ml_stage, prob_subtype_stage,
samples_likelihood] = sustain_input.run_sustain_algorithm(plot=False)
```


# Results

We ran the analysis for 1-6 latent subgroups, each with their own ordering. @fig-pvd1 - @fig-pvd6 show positional variance diagrams (PVDs) indicating the probability that each outcome event (y-axis) occurs at each sequence position (x-axis). 

## one subgroup

```{r}
#| label: "fig-pvd1"
#| column: screen
#| fig-height: 15
#| fig-align: center
#| fig-cap: "positional variance diagram for 1 subgroup"
#| fig-cap-location: top

figs = extract_figs_from_pickle(
  n_s = 1,
  dataset_name = dataset_name,
  output_folder = output_folder,
  score_vals = score_vals,
  biomarker_plot_order = NULL,
  
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels) 
print(figs[[1]])
```

## two subgroups

```{r}
#| label: "fig-pvd2"
#| layout-ncol: 2
#| fig-height: 15
#| fig-cap: "positional variance diagrams for 2 subgroups"
#| fig-cap-location: top
#| fig-align: center
#| column: screen
#| fig-subcap: 
#|   - "Subgroup 1"
#|   - "Subgroup 2"
biomarker_plot_order2 = NULL
figs = extract_figs_from_pickle(
  synchronize_y_axes = synchronize_y_axes,
  n_s = 2,
  dataset_name = dataset_name,
  output_folder = output_folder,
  score_vals = score_vals,
  biomarker_plot_order = biomarker_plot_order2,
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)
figs |> 
  print_PVDs()

```

## three subgroups

```{r}
figs = extract_figs_from_pickle(
  synchronize_y_axes = synchronize_y_axes,
  n_s = 3,
  dataset_name = dataset_name,
  output_folder = output_folder,
  score_vals = score_vals,
  biomarker_plot_order = biomarker_plot_order2,
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)
```

```{r}
#| label: "fig-pvd3"
#| layout-ncol: 3
#| fig-height: 15
#| fig-align: center
#| fig-cap: "positional variance diagrams for 3 subgroups"
#| fig-cap-location: top
#| column: screen
#| fig-subcap:
#|   - "Subgroup 1"
#|   - "Subgroup 2"
#|   - "Subgroup 3"
library(ggplot2)

figs |> 
  print_PVDs()

```

## four subgroups

```{r}
figs = extract_figs_from_pickle(
  synchronize_y_axes = synchronize_y_axes,
  n_s = 4,
  dataset_name = dataset_name,
  output_folder = output_folder,
  score_vals = score_vals,
  biomarker_plot_order = biomarker_plot_order2,
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)
```

```{r}
#| label: "fig-pvd4"
#| layout-ncol: 4
#| fig-height: 15
#| fig-align: center
#| fig-cap: "positional variance diagrams for 4 subgroups"
#| fig-cap-location: top
#| column: screen
#| fig-subcap:
#|   - "Subgroup 1"
#|   - "Subgroup 2"
#|   - "Subgroup 3"
#|   - "Subgroup 4"
library(ggplot2)

figs |> 
  print_PVDs()

```


## five subgroups

```{r}
figs = extract_figs_from_pickle(
  synchronize_y_axes = synchronize_y_axes,
  n_s = 5,
  dataset_name = dataset_name,
  output_folder = output_folder,
  score_vals = score_vals,
  biomarker_plot_order = biomarker_plot_order2,
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)
```

```{r}
#| label: "fig-pvd5"
#| layout-ncol: 3
#| fig-height: 15
#| fig-align: center
#| fig-cap: "positional variance diagrams for 5 subgroups"
#| fig-cap-location: top
#| column: screen
#| fig-subcap:
#|   - "Subgroup 1"
#|   - "Subgroup 2"
#|   - "Subgroup 3"
#|   - "Subgroup 4"
#|   - "Subgroup 5"
library(ggplot2)

figs |> 
  print_PVDs()

```

## six subgroups

```{r "build-figs-6sg"}
figs = extract_figs_from_pickle(
  synchronize_y_axes = synchronize_y_axes,
  n_s = 6,
  dataset_name = dataset_name,
  output_folder = output_folder,
  score_vals = score_vals,
  biomarker_plot_order = biomarker_plot_order2,
  biomarker_groups = biomarker_groups,
  biomarker_levels = biomarker_levels)
```

```{r}
#| label: "fig-pvd6"
#| layout-ncol: 3
#| fig-height: 15
#| fig-align: center
#| fig-cap: "positional variance diagrams for 6 subgroups"
#| fig-cap-location: top
#| column: screen
#| fig-subcap:
#|   - "Subgroup 1"
#|   - "Subgroup 2"
#|   - "Subgroup 3"
#|   - "Subgroup 4"
#|   - "Subgroup 5"
#|   - "Subgroup 6"
library(ggplot2)

figs |> 
  print_PVDs()

```

@fig-mcmc-loglik shows the distribution of log-likelihoods from the MCMC samples for each number of clusters. We can see that adding up to 6 clusters substantially improves the log-likelihood.

We can choose an optimal number of clusters using the Cross-Validation Information Criterion (CVIC) [@young2018uncovering] (work in progress).

```{r}
#| fig-height: 4
#| label: fig-mcmc-loglik
#| fig-cap: log-likelihoods of MCMC samples, by number of subtypes
py$samples_likelihood |>
  graph_likelihoods_v2(alpha = 0.5) |>
  suppressWarnings()

```

# Discussion

[to be added]

# References{.unnumbered}

::: {#refs}
:::
