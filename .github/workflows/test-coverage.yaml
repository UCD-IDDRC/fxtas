# Workflow derived from https://github.com/r-lib/actions/tree/v2/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
on:
  push:
    branches: [main, master]
  pull_request:

name: test-coverage.yaml

permissions: read-all

jobs:
  test-coverage:
    runs-on: macos-13
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@HEAD

      - uses: actions/setup-python@HEAD
        with:
          python-version: '3.9'

      - uses: r-lib/actions/setup-r@HEAD
        with:
          use-public-rspm: true

      - uses: r-lib/actions/setup-r-dependencies@HEAD
        with:
          extra-packages: any::covr, any::xml2
          needs: coverage

      - name: setup r-reticulate venv
        shell: Rscript {0}
        run: |

          library(reticulate)
          reticulate::py_require(
            packages = c(
              "git+https://github.com/ucl-pond/kde_ebm",
              "git+https://github.com/d-morrison/pySuStaIn"
            ),
            python_version = "3.9"
          )

          pyconfig <- reticulate::py_config() |> print()
          path_to_venv <- pyconfig$python
          cat("path_to_venv = ", path_to_venv)
          writeLines(
            paste0("RETICULATE_PYTHON=", path_to_venv),
            Sys.getenv("GITHUB_ENV"))


      - name: Test coverage
        run: |

          library(reticulate)
          reticulate::py_require(
            packages = c(
              "git+https://github.com/ucl-pond/kde_ebm",
              "git+https://github.com/d-morrison/pySuStaIn"
            ),
            python_version = "3.9"
          )

          pyconfig <- reticulate::py_config() |> print()

          cov <- covr::package_coverage(
            quiet = FALSE,
            clean = FALSE,
            install_path = file.path(normalizePath(Sys.getenv("RUNNER_TEMP"), winslash = "/"), "package")
          )
          covr::to_cobertura(cov)
        shell: Rscript {0}

      # copied from https://github.com/dieghernan/nominatimlite/actions/runs/12116366823/workflow
      - name: Create Junit Report
        if: always()
        run: |
          test_out <- path.expand(file.path(getwd(), "junit.xml"))
          testthat::test_local(reporter = testthat::JunitReporter$new(test_out))
        shell: Rscript {0}

      # following https://app.codecov.io/gh/UCD-SERG/serodynamics/tests/new
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@HEAD
        with:
          # Fail if error if not on PR, or if on PR and token is given
          fail_ci_if_error: ${{ github.event_name != 'pull_request' || secrets.CODECOV_TOKEN }}
          file: ./junit.xml
          token: ${{ secrets.CODECOV_TOKEN }}

      - uses: codecov/codecov-action@v5
        with:
          # Fail if error if not on PR, or if on PR and token is given
          fail_ci_if_error: ${{ github.event_name != 'pull_request' || secrets.CODECOV_TOKEN }}
          files: ./cobertura.xml
          plugins: noop
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: UCD-IDDRC/fxtas

      - name: Show testthat output
        if: always()
        run: |
          ## --------------------------------------------------------------------
          find '${{ runner.temp }}/package' -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@HEAD
        with:
          name: coverage-test-failures
          path: ${{ runner.temp }}/package
